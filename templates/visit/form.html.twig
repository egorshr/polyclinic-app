{# templates/visit/form.html.twig #}
{% extends 'base.html.twig' %}

{% block title %}Запись на прием - {{ parent() }}{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    {# Стили можно скопировать из booking/form.html.twig и при необходимости адаптировать #}
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f8;
            margin: 0;
            padding: 0;
        }

        .form-container {
            max-width: 600px;
            background: white;
            padding: 30px;
            margin: 50px auto;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }

        .form-container h1.page-title {
            text-align: center;
            color: #333;
            margin-bottom: 20px;
        }

        .form-label-custom {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
            color: #444;
        }

        .form-input-custom,
        .form-select-custom {
            width: 100%;
            padding: 10px;
            margin-bottom: 15px;
            border-radius: 5px;
            border: 1px solid #ccc;
            box-sizing: border-box;
        }

        .form-input-custom.is-invalid,
        .form-select-custom.is-invalid {
            border-color: #cc0000;
        }

        .invalid-feedback {
            color: #cc0000;
            font-size: 0.875em;
            display: block;
            margin-top: -10px;
            margin-bottom: 10px;
        }

        .form-button-custom {
            background-color: #5c67f2;
            color: white;
            border: none;
            padding: 12px;
            width: 100%;
            font-size: 16px;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.2s;
        }

        .form-button-custom:hover {
            background-color: #434de2;
        }

        .errors-summary-custom {
            background-color: #ffe0e0;
            border: 1px solid #cc0000;
            padding: 10px;
            margin-bottom: 20px;
            color: #cc0000;
            border-radius: 4px;
        }

        .errors-summary-custom ul {
            padding-left: 20px;
            margin-bottom: 0;
        }

        .form-nav-links {
            display: flex;
            justify-content: space-between;
            margin-top: 20px;
            padding-top: 15px;
            border-top: 1px solid #eee;
        }

        .form-nav-links a {
            color: #5c67f2;
            text-decoration: none;
            font-weight: bold;
        }

        .form-nav-links a:hover {
            text-decoration: underline;
        }
    </style>
{% endblock %}

{% block body %}
    <div class="form-container">
        <h1 class="page-title">Запись на прием в поликлинику</h1>

        {% if errors is defined and errors is iterable %}
            {% set generalErrors = [] %}
            {% for key, error_message_list in errors %}
                {% if key not in ['specialty', 'employee', 'service', 'visit_datetime'] and error_message_list is iterable %}
                    {% for single_error in error_message_list %}
                        {% set generalErrors = generalErrors|merge([single_error]) %}
                    {% endfor %}
                {% elseif key not in ['specialty', 'employee', 'service', 'visit_datetime'] and error_message_list is not iterable %}
                    {% set generalErrors = generalErrors|merge([error_message_list]) %}
                {% endif %}
            {% endfor %}
            {% if generalErrors is not empty %}
                <div class="errors-summary-custom">
                    <strong>Обнаружены ошибки:</strong>
                    <ul>
                        {% for error_message in generalErrors %}
                            <li>{{ error_message }}</li>
                        {% endfor %}
                    </ul>
                </div>
            {% endif %}
        {% endif %}


        <form action="{{ path('visit_form_submit') }}" method="POST" autocomplete="off">
            {# Поле для выбора специальности #}
            <div>
                <label for="specialty_id" class="form-label-custom">Специальность врача</label>
                <select name="specialty_id" id="specialty_id"
                        class="form-select-custom {% if errors.specialty is defined %}is-invalid{% endif %}" required>
                    <option value="">Выберите специальность</option>
                    {% for specialty in availableSpecialties %}
                        <option value="{{ specialty.id }}" {{ (data.specialty_id | default('') == specialty.id) ? 'selected' : '' }}>
                            {{ specialty.name }}
                        </option>
                    {% endfor %}
                </select>
                {% if errors.specialty is defined %}
                    <div class="invalid-feedback">{{ errors.specialty|join(', ') }}</div>
                {% endif %}
            </div>

            {# Поле для выбора врача (сотрудника) - будет фильтроваться по специальности #}
            <div>
                <label for="employee_id" class="form-label-custom">Врач</label>
                <select name="employee_id" id="employee_id"
                        class="form-select-custom {% if errors.employee is defined %}is-invalid{% endif %}" required>
                    <option value="">Сначала выберите специальность</option>
                    {# Изначально рендерим всех врачей, JS их отфильтрует/скроет #}
                    {% for employee in availableEmployees %}
                        <option value="{{ employee.id }}" data-specialty-id="{{ employee.specialty.id }}"
                                {{ (data.employee_id | default('') == employee.id) ? 'selected' : '' }}>
                            {{ employee.fullName }} ({{ employee.specialty.name }})
                        </option>
                    {% endfor %}
                </select>
                {% if errors.employee is defined %}
                    <div class="invalid-feedback">{{ errors.employee|join(', ') }}</div>
                {% endif %}
            </div>

            {# Поле для выбора медицинской услуги (опционально) #}
            <div>
                <label for="service_id" class="form-label-custom">Медицинская услуга</label>
                <select name="service_id" id="service_id"
                        class="form-select-custom {% if errors.service is defined %}is-invalid{% endif %}">
                    <option value="">Выберите услугу</option>
                    {% for service_item in availableServices %}
                        <option value="{{ service_item.id }}" {{ (data.service_id | default('') == service_item.id) ? 'selected' : '' }}>
                            {{ service_item.name }} ({{ service_item.price }} руб.)
                        </option>
                    {% endfor %}
                </select>
                {% if errors.service is defined %}
                    <div class="invalid-feedback">{{ errors.service|join(', ') }}</div>
                {% endif %}
            </div>

            {# Поле для выбора даты и времени #}
            <div>
                <label for="visit_date" class="form-label-custom">Дата приема</label>
                <input type="date" name="visit_date" id="visit_date" class="form-input-custom {% if errors.visit_date is defined %}is-invalid{% endif %}"
                       value="{{ data.visit_date | default('') }}" required
                       min="{{ "now"|date("Y-m-d") }}">
                {% if errors.visit_date is defined %}
                    <div class="invalid-feedback">{{ errors.visit_date is iterable ? errors.visit_date|join(', ') : errors.visit_date }}</div>
                {% endif %}
            </div>

            <div>
                <label for="visit_time" class="form-label-custom">Время приема</label>
                <select name="visit_time" id="visit_time" class="form-select-custom {% if errors.visit_time is defined %}is-invalid{% endif %}" required disabled>
                    <option value="">Сначала выберите врача и дату</option>
                </select>
                {% if errors.visit_time is defined %}
                    <div class="invalid-feedback">{{ errors.visit_time is iterable ? errors.visit_time|join(', ') : errors.visit_time }}</div>
                {% endif %}
            </div>

            <button type="submit" class="form-button-custom">Записаться</button>
        </form>

        <div class="form-nav-links">
            <a href="{{ path('visit_list') }}">Просмотр моих записей</a>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    {# Если не используете AssetMapper, здесь должны быть ссылки на CDN flatpickr #}
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // --- 1. Получение элементов ---
            const specialtySelect = document.getElementById('specialty_id');
            const employeeSelect = document.getElementById('employee_id');
            const dateInput = document.getElementById('visit_date');
            const timeSelect = document.getElementById('visit_time');

            if (!specialtySelect || !employeeSelect || !dateInput || !timeSelect) {
                console.error('Ошибка: один из ключевых элементов формы не найден.');
                return;
            }

            // --- 2. Инициализация календаря Flatpickr ---
            let calendar = flatpickr(dateInput, {
                locale: "ru", // Используем русский язык
                dateFormat: "Y-m-d", // Формат, который отправляется на сервер
                altInput: true, // Показываем пользователю дату в другом формате
                altFormat: "d.m.Y", // Формат для пользователя
                minDate: "today",
                enable: [], // Изначально все даты заблокированы
                onChange: function(selectedDates, dateStr, instance) {
                    // Эта функция будет вызвана, когда пользователь выберет дату
                    // Запускаем загрузку временных слотов
                    fetchTimeSlots();
                }
            });

            // "Мастер-список" всех врачей
            const allEmployeeOptions = Array.from(employeeSelect.options).filter(opt => opt.value !== "");

            // --- 3. Функции ---

            // Функция фильтрации Врачей по Специальности
            function filterEmployeesBySpecialty() {
                const selectedSpecialtyId = specialtySelect.value;
                const previouslySelectedEmployeeId = employeeSelect.value;

                employeeSelect.innerHTML = '';
                const placeholder = document.createElement('option');
                placeholder.value = "";
                placeholder.textContent = selectedSpecialtyId ? "Выберите врача" : "Сначала выберите специальность";
                employeeSelect.appendChild(placeholder);

                if (selectedSpecialtyId) {
                    allEmployeeOptions.forEach(function(optionTemplate) {
                        if (optionTemplate.dataset.specialtyId === selectedSpecialtyId) {
                            employeeSelect.appendChild(optionTemplate.cloneNode(true));
                        }
                    });
                }

                // Восстанавливаем выбор, если это возможно
                if (previouslySelectedEmployeeId) {
                    employeeSelect.value = previouslySelectedEmployeeId;
                }

                // После изменения списка врачей, нужно загрузить доступные ДАТЫ
                fetchAvailableDates();
            }

            // НОВАЯ Функция для загрузки доступных ДАТ и обновления календаря
            function fetchAvailableDates() {
                const doctorId = employeeSelect.value;

                // Сбрасываем календарь и время, если врач не выбран
                calendar.clear();
                calendar.set('enable', []);
                timeSelect.innerHTML = '<option value="">Сначала выберите врача</option>';
                timeSelect.disabled = true;

                if (!doctorId) {
                    return;
                }

                // Запрашиваем доступные даты у API
                fetch(`/api/employees/${doctorId}/available-dates`)
                    .then(response => response.json())
                    .then(dates => {
                        if (dates.length > 0) {
                            // "Включаем" только доступные даты в календаре
                            calendar.set('enable', dates);
                            dateInput.placeholder = "Выберите доступную дату";
                        } else {
                            dateInput.placeholder = "У этого врача нет доступных дат";
                        }
                    })
                    .catch(error => {
                        console.error('Ошибка при загрузке дат:', error);
                        dateInput.placeholder = "Ошибка загрузки дат";
                    });
            }

            // Функция для загрузки ВРЕМЕНИ (остается почти такой же)
            function fetchTimeSlots() {
                const doctorId = employeeSelect.value;
                const dateValue = dateInput.value;

                timeSelect.innerHTML = '<option value="">Выберите время</option>';
                timeSelect.disabled = true;

                if (!doctorId || !dateValue) {
                    return;
                }

                timeSelect.innerHTML = '<option value="">Загрузка...</option>';

                fetch(`/api/employees/${doctorId}/available-slots?date=${dateValue}`)
                    .then(response => response.json())
                    .then(slots => {
                        timeSelect.innerHTML = '';
                        if (slots.length === 0) {
                            timeSelect.innerHTML = '<option value="">Нет доступного времени</option>';
                        } else {
                            slots.forEach(slot => {
                                const option = document.createElement('option');
                                option.value = slot;
                                option.textContent = slot;
                                timeSelect.appendChild(option);
                            });
                            timeSelect.disabled = false;
                        }
                    })
                    .catch(error => {
                        console.error('Ошибка при загрузке слотов:', error);
                        timeSelect.innerHTML = '<option value="">Ошибка загрузки</option>';
                    });
            }

            // --- 4. Навешиваем обработчики ---
            specialtySelect.addEventListener('change', filterEmployeesBySpecialty);
            employeeSelect.addEventListener('change', fetchAvailableDates);

            // --- 5. Первоначальный запуск ---
            filterEmployeesBySpecialty();
        });
    </script>
{% endblock %}